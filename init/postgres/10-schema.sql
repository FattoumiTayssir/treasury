-- PostgreSQL schema derived from previous SQL Server ERD
-- No seed data included.

BEGIN;

-- USER table (quoted as "User" because USER is a keyword)
CREATE TABLE IF NOT EXISTS "User" (
  user_id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  display_name  VARCHAR(120)  NOT NULL,
  email         VARCHAR(254)  NOT NULL,
  role          VARCHAR(20)   NOT NULL,
  created_at    TIMESTAMPTZ(3) NOT NULL DEFAULT now(),
  updated_at    TIMESTAMPTZ(3) NOT NULL DEFAULT now(),
  CONSTRAINT CK_User_role CHECK (role IN ('Admin', 'Manager')),
  CONSTRAINT UX_User_email UNIQUE (email)
);

-- COMPANY
CREATE TABLE IF NOT EXISTS Company (
  company_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name       VARCHAR(200) NOT NULL
);

-- MANUAL_ENTRY (parent record for many Movements)
CREATE TABLE IF NOT EXISTS Manual_Entry (
  manual_entry_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  frequency       VARCHAR(20) NOT NULL,
  start_date      DATE        NOT NULL,
  end_date        DATE,
  timezone        VARCHAR(64),
  recurrence      JSONB,
  rrule           VARCHAR(512),
  metadata        JSONB,
  CONSTRAINT CK_ManualEntry_frequency CHECK (frequency IN ('Une seule fois', 'Mensuel', 'Annuel'))
);

-- MOVEMENT
CREATE TABLE IF NOT EXISTS Movement (
  movement_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_id       INTEGER      NOT NULL REFERENCES Company(company_id),
  manual_entry_id  INTEGER      NULL REFERENCES Manual_Entry(manual_entry_id),
  category         VARCHAR(20)  NOT NULL,
  type             VARCHAR(100) NOT NULL,
  amount           NUMERIC(18,2) NOT NULL,
  sign             VARCHAR(10)  NOT NULL,
  movement_date    DATE         NOT NULL,
  reference_type   VARCHAR(50)  NOT NULL,
  reference        VARCHAR(100) NOT NULL,
  reference_status VARCHAR(50),
  source           VARCHAR(30)  NOT NULL,
  note             TEXT,
  visibility       VARCHAR(30)  NOT NULL,
  status           VARCHAR(20)  NOT NULL,
  created_at       TIMESTAMPTZ(3) NOT NULL DEFAULT now(),
  created_by       INTEGER      NOT NULL REFERENCES "User"(user_id),
  odoo_link        VARCHAR(512),
  updated_at       TIMESTAMPTZ(3) NOT NULL DEFAULT now(),
  updated_by       INTEGER      REFERENCES "User"(user_id),
  disabled_at      TIMESTAMPTZ(3),
  disabled_by      INTEGER      REFERENCES "User"(user_id),
  disable_reason   TEXT,
  archived_at      TIMESTAMPTZ(3),
  archived_by      INTEGER      REFERENCES "User"(user_id),
  archive_reason   TEXT,
  archive_version  INTEGER      NOT NULL DEFAULT 1,
  CONSTRAINT CK_Movement_category CHECK (category IN ('RH', 'Achat', 'Vente', 'Compta', 'Autre')),
  CONSTRAINT CK_Movement_sign CHECK (sign IN ('Entrée', 'Sortie')),
  CONSTRAINT CK_Movement_reference_type CHECK (reference_type IN ('Facture', 'Avoir', 'BL', 'Cmd CLI/Fourn.')),
  CONSTRAINT CK_Movement_source CHECK (source IN ('Odoo', 'Entrée manuelle')),
  CONSTRAINT CK_Movement_visibility CHECK (visibility IN ('Public', 'Hors simulation', 'Privée')),
  CONSTRAINT CK_Movement_status CHECK (status IN ('Actif', 'Désactivé', 'Archivé')),
  CONSTRAINT CK_Movement_amount_nonnegative CHECK (amount >= 0)
);

-- Indexes for Movement
CREATE INDEX IF NOT EXISTS IX_Movement_company_date ON Movement(company_id, movement_date);
CREATE INDEX IF NOT EXISTS IX_Movement_company ON Movement(company_id);
CREATE INDEX IF NOT EXISTS IX_Movement_created_by ON Movement(created_by);
CREATE INDEX IF NOT EXISTS IX_Movement_updated_by ON Movement(updated_by);
CREATE INDEX IF NOT EXISTS IX_Movement_archived_by ON Movement(archived_by);
CREATE INDEX IF NOT EXISTS IX_Movement_disabled_by ON Movement(disabled_by);
CREATE UNIQUE INDEX IF NOT EXISTS UX_Movement_reference ON Movement(company_id, reference_type, reference, archive_version);

-- USER_COMPANY
CREATE TABLE IF NOT EXISTS User_Company (
  user_company_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id         INTEGER NOT NULL REFERENCES "User"(user_id),
  company_id      INTEGER NOT NULL REFERENCES Company(company_id),
  CONSTRAINT UX_User_Company_user_company UNIQUE (user_id, company_id)
);

-- EXCEPTION
CREATE TABLE IF NOT EXISTS "Exception" (
  exception_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_id       INTEGER      NOT NULL REFERENCES Company(company_id),
  category         VARCHAR(50),
  type             VARCHAR(100) NOT NULL,
  exception_type   VARCHAR(20)  NOT NULL,
  criticity        VARCHAR(20)  NOT NULL,
  description      TEXT,
  amount           NUMERIC(18,2) NOT NULL,
  sign             VARCHAR(10),
  reference_type   VARCHAR(50),
  reference        VARCHAR(100),
  reference_status VARCHAR(50),
  odoo_link        VARCHAR(512),
  status           VARCHAR(20)  NOT NULL,
  created_at       TIMESTAMPTZ(3) NOT NULL DEFAULT now(),
  CONSTRAINT CK_Exception_exception_type CHECK (exception_type IN ('Auto', 'À ajouter', 'Partiel')),
  CONSTRAINT CK_Exception_criticity CHECK (criticity IN ('Critique', 'Majeure', 'Warning')),
  CONSTRAINT CK_Exception_status CHECK (status IN ('Actif', 'Désactivé'))
);

COMMIT;
