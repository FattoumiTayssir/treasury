services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres-treasury
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-appdb}
      TZ: UTC
    ports:
      - "${HOST_PG_PORT:-5432}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    networks:
      - treasury-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: treasury-backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-appdb}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${DB_NAME:-appdb}
      ODOO_URL: ${ODOO_URL}
      ODOO_DB: ${ODOO_DB}
      ODOO_USERNAME: ${ODOO_USERNAME}
      ODOO_PASSWORD: ${ODOO_PASSWORD}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./etl_jobs:/etl_jobs:ro
    restart: unless-stopped
    networks:
      - treasury-network

  frontend:
    image: node:18-alpine
    container_name: treasury-frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host"
    ports:
      - "3000:3000"
    volumes:
      - ./front2:/app
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - treasury-network

volumes:
  pg_data:

networks:
  treasury-network:
    driver: bridge
